<?php

namespace App\Http\Controllers;

use App\Models\Post;
use App\Models\Tag;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;

class PostController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $posts = Post::orderByDesc('id')->paginate(10);
        return view('posts.index', compact(['posts']));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('posts.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validation = [
            'title' => [
                'required',
                'string',
                'max:250',
                'min:2',
            ],
            'content' => [
                'required',
                'min:50',
                'max:32000',
            ],
        ];

        $this->validate($request, $validation);

        $author = Auth::user();
        $newPost = $request->all();
        $slug = Str::slug($request->input('title'), "-");
        // check to see if any other slugs exist that are the same & count them
        $count = Post::whereRaw("slug RLIKE '^{$slug}(-[0-9]+)?$'")->count();
        // if other slugs exist that are the same, append the count to the slug
        $newPost['slug'] = $count ? "{$slug}-{$count}" : $slug;

        $post = new Post($newPost);
        $post->author()->associate($author)->save();
        $tagList = array_map('trim', explode(",", $newPost['tags']));
        foreach ($tagList as $tag) {
            $tags[] = Tag::firstOrCreate(['name' => mb_strtolower($tag)]);
        }
        $post->tags()->saveMany($tags);


        return redirect()->route('posts.index')
            ->with("success", __("Post successfully created"));
    }

    /**
     * Display the specified resource.
     */
    public function show(Post $post)
    {
        return view('posts.show', compact(['post']));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Post $post)
    {
        foreach ($post->tags as $tag) {
            $tags[] = $tag->name;
        }
        $tags = implode(",", $tags);
        return view('posts.edit', compact(['post', 'tags',]));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Post $post)
    {
        // not checking for slug at the moment, it will be autogenerated
        $validation = [
            'title' => [
                'required',
                'string',
                'max:250',
                'min:2',
            ],
            'content' => [
                'required',
                'min:50',
                'max:32000',
            ],
        ];

        $this->validate($request, $validation);
        $input = $request->all();

        // TODO: take care of the update with no change in slug/title
        $slug = Str::slug($request->input('title'), "-");
        $count = Post::whereRaw("slug RLIKE '^{$slug}(-[0-9]+)?$'")->count();
        $newPost['slug'] = $count ? "{$slug}-{$count}" : $slug;

        $post->update($input);

        $tagList = array_map('trim', explode(",", $input['tags']));
        $post->tags()->detach(); // Remove tags ready to add new ones

        foreach ($tagList as $tag) {
            $tags[] = Tag::firstOrCreate(['name' => mb_strtolower($tag)]);
        }
        $post->tags()->saveMany($tags);

        return redirect()->route('posts.show', compact(['post']))
            ->with('success', __('Post updated successfully'));
    }

    /**
     * Show confirmation to delete a resource.
     */
    public function delete(Post $post)
    {
        return view('posts.delete', compact(['post']));
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Post $post)
    {
        $oldPost = $post;
        $post->delete();
        return redirect()->route('posts.index')
            ->with('success', "User {$oldPost->name} deleted successfully");
    }
}
